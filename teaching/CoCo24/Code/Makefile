#
# Makefile for directory with code for DD2442 Seminars on TCS
#
# AUTHOR:
#   Jakob Nordström, jakobn@kth.se
#
# NOTES:
#   This makefile is GNU-make-specific.
#
# VERSION:
#   Sep 30, 2016
#

#
# VARIABLES SPECIFIC FOR PROJECT
#--------------------------------
#



RPOBJS		= randompermutation.o file_io.o msghandling.o randomnumbers.o
OBJS		= $(RPOBJS)
EXECS		= randompermutation scheduleparser
OTHER_OBJS	= # insert names of .o-files without .c-files



#
# GENERIC VARIABLES
#-------------------
#
# For info about gcc flags, see bottom of Makefile
#

DIALECT_FLAGS	= -ansi -pedantic
WARN_FLAGS	= -Wall -Wno-parentheses -Wbad-function-cast -Wcast-qual \
		  -Wstrict-prototypes -Wmissing-prototypes -W # -Wconversion 
DEBUG_FLAGS	= -g # -Q # -DNDEBUG 
OPT_FLAGS	= # -O1 # -O3 # -ffast-math 
MISC_FLAGS	= # -pipe
INCLUDEDIRS	= #$(addprefix -I, $(DIRS))

CC		= gcc
CPPFLAGS	= $(INCLUDEDIRS) $(ADDED_CPPFLAGS) # -H
CFLAGS		= $(DIALECT_FLAGS) $(WARN_FLAGS) $(OPT_FLAGS) $(DEBUG_FLAGS) \
		  $(MISC_FLAGS) $(ADDED_CFLAGS)
LDLIBS		= -lm

SHELL		= /bin/sh


#
# DEPENDENCY FILES
#------------------
#
# implicit rule for generating dependency-files (suffix: .d) for all source 
# code files specifying which header files they depend on.
#
# The switch -M tells the preprocessor to output a rule suitable for `make'
# describing the dependencies of each object file. 
#
# The switch -MM is like -M but tells gcc not to include system header files.
#
# The switch -MG tells gcc to suppose non-existent header files exist
# in current directory. This is so that gcc will not be confused when 
# e.g. header files generated by bison does not exist.
#
# (The switch -MG was formerly placed directly after -MM but has been removed.
# It should be added for projects using lex/yacc-like tools.) 
#

%.d: %.c
		$(strip $(SHELL) -ec '$(CC) -MM $(CPPFLAGS) $< \
		              | sed '\''s/$*\\.o[ :]*/& $@/g'\'' > $@')


#
# FILE NAME VARIABLES
#---------------------
#
# variables containing names of source code files and automatically
# generated dependency files
#

SRCS		= $(OBJS:.o=.c)
DEPS		= $(SRCS:.c=.d)


#
# TARGETS
#---------
#

#
# TARGETS FOR COMPILING AND LINKING
#
# Rules for linking C code files should typically look something like:
#
#$(MY_EXEC):	$(MY_OBJS)
#		$(LINK.c) -o $@  $^ $(LDLIBS)
#


.PHONY:			all  objs

all:			$(EXECS)

objs:			$(OBJS) $(OTHER_OBJS)

scheduleparser:		scheduleparser.cc
			g++ -o scheduleparser scheduleparser.cc

randompermutation:  	$(RPOBJS)
			$(LINK.c) -o $@  $^ $(LDLIBS)


#
# TARGETS FOR CLEANING
#

.PHONY:		clean cleanbak cleandeps cleanexecs cleanall 

clean:		;rm -f $(OBJS) $(OTHER_OBJS)
cleanbak:	;rm -f *~ 
cleandeps:	;rm -f $(DEPS) 
cleanexecs:	;rm -f $(EXECS) 

cleanall:	clean cleanbak cleandeps cleanexecs


#
# INCLUSION OF DEPENDENCY FILES
#-------------------------------
#
# Include the automatically generated dependency-files in the makefile
# *after* the targets. Otherwise the first dependency target will
# be used as the default target instead of "all" (in case the including
# makefile has not defined any targets before including this file).
#
# '-' turns off error reporting if the file didn't exist
#

-include $(DEPS)



#
# INFORMATION ABOUT FLAGS FOR GCC
#---------------------------------
#
# -ansi		In C mode, support all ANSI standard C programs. In C++ mode,
#		remove GNU extensions that conflict with ANSI C++. This turns 
#		off certain features of GCC that are incompatible with
#		ANSI C (when compiling C code),
# -pedantic	Issue all the warnings demanded by strict ANSI C and ISO C++;
#		reject all programs that use forbidden extensions.
# -Wall		Enables warnings about constructions that some users consider
#		questionable, and that are easy to avoid (or modify to prevent
#		the warning), even in conjunction with macros.
# -W		Print extra warning messages for a number of events (see 
#		the documentation).
# -Wbad-function-cast   Warn whenever a function call is cast to a 
#		non-matching type.
# -Wcast-qual	Warn whenever a pointer is cast so as to remove a type 
#		qualifier from the target type. 
# -Wconversion	Warn if a prototype causes a type conversion that is different
#		from what would happen to the same argument in the absence of a
#		prototype.  
# -Wstrict-prototypes	Warn if a function is declared or defined without 
#		specifying the argument types. 
# -Wmissing-prototypes	Warn if a global function is defined without a previous
#		prototype declaration. This warning is issued even if the
#		the definition itself provides a prototype. The aim is to de-
#		tect global functions that fail to be declared in header files.
# -g 		Produce debugging information in the operating system's native 
#		format (stabs, COFF, XCOFF, or DWARF). GDB can work with 
#		this debugging information. Generally -g should be turned ON. 
# -ggdb		Produce debugging information for use by GDB.  This means to 
#		use the most expressive format available including GDB
#		extensions if at all possible.
# -p		Generate extra code to write profile information suitable for 
#		the analysis program `prof'. You must use this option when 
#		compiling the source files you want data about, and you must 
#		also use it when linking.
# -pg		Generate extra code to write profile information suitable for 
#		the analysis program `gprof'. You must use this option when 
#		compiling the source files you want data about, and you must 
#		also use it when linking.
# -Q		Makes the compiler print out each function name as it is 
#		compiled, and print some statistics about each pass when it 
#		finishes.
# -DNDEBUG 	-D<macro> defines <macro> with value 1. If NDEBUG is defined
#		assert macros are ignored.
# -O0		No optimization
# -O1		Optimize. Optimizing compilation takes somewhat more time, and
# 		a lot more memory for a large function. '-O1' turns on data
#		flow analysis which in turn makes in possible to get warnings
#		about uninitialized automatic variables.
# -O2		Optimize even more.  GCC performs nearly all supported
#		optimizations that do not involve a space-speed tradeoff. The
#		compiler does not perform loop unrolling or function inlining.
# -O3		Optimize yet more.  `-O3' turns on all optimizations specified 
#		by `-O2' and also turns on the `inline-functions' option.
# -ffast-math	This option allows GCC to violate some ANSI or IEEE rules 
#		and/or specifications in the interest of optimizing code for 
#		speed. For example, it allows the compiler to assume arguments 
#		to the `sqrt' function are non-negative numbers and that no 
#		floating-point values are NaNs.
# -funroll-loops        Perform the optimization of loop unrolling. This is 
#		only done for loops whose number of iterations can be 
#		determined at compile time or run time.
# -pipe		Use pipes rather than temporary files for communication 
#		between the various stages of compilation.
# -H 		prints the name of each header file used during preprocessing
#		(there can be quite a few of them, though).
# 		normal activities (during preprocessing).
# -s		Remove all symbol table and relocation information from the
#		executable when linking.
# -IDIR		Add the directory DIR to the head of the list of directories 
#		to be searched for header files.
#
